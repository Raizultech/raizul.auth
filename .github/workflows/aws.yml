name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      update_prod:
        description: '¬øActualizar imagen en producci√≥n? (true/false)'
        required: false
        default: 'false'
        type: boolean

jobs:
  build-and-deploy:
    name: Build, Push & Deploy to Stage
    runs-on: ubuntu-latest
    
    environment:
      name: dev
      
    outputs:
      image_identifier_sha: ${{ steps.build-image.outputs.image_sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # --- PASO 2: DARLE UN ID A ESTE STEP Y CREAR UN OUTPUT ---
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7) # Usamos SHA corto para legibilidad
        
        docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG_SHA .
        docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:latest .
        
        docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG_SHA
        docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:latest
        
        # Guardamos el identificador completo de la imagen como un output del step
        echo "image_sha=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT

    - name: Update App Runner (Stage) with new image
      run: |
        echo "Actualizando App Runner Stage..."
        aws apprunner update-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN_STG }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ steps.build-image.outputs.image_sha }}",
              "ImageRepositoryType": "ECR"
            }
          }'

  notify-build:
    name: Build & Stage Deploy Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
    - name: Notification
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "üéâ Build y despliegue a Stage completado con √©xito!"
        else
          echo "‚ùå Fall√≥ la construcci√≥n o el despliegue a Stage."
          exit 1
        fi

  update-prod:
    name: Deploy to Production
    
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.update_prod == 'true' }}
    runs-on: ubuntu-latest
    
    environment:
      name: prd
      
    needs: [build-and-deploy]
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Update App Runner (Production) with new image
      run: |
        echo "Actualizando App Runner Producci√≥n..."
        # --- PASO 3: USAR EL OUTPUT DEL JOB ANTERIOR ---
        aws apprunner update-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN_PRD }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ needs.build-and-deploy.outputs.image_identifier_sha }}",
              "ImageRepositoryType": "ECR"
            }
          }'
          
  notify-prod:
    name: Production Deploy Results
    runs-on: ubuntu-latest
    needs: [update-prod]
    if: always() # Se ejecuta incluso si el job de despliegue no se activ√≥ (dar√° 'skipped')
    steps:
    - name: Notification
      run: |
        if [[ "${{ needs.update-prod.result }}" == "success" ]]; then
          echo "üéâ Despliegue a Producci√≥n completado con √©xito!"
        elif [[ "${{ needs.update-prod.result }}" == "skipped" ]]; then
          echo "‚û°Ô∏è Despliegue a Producci√≥n omitido en esta ejecuci√≥n."
        else
          echo "‚ùå Fall√≥ el despliegue a Producci√≥n."
          exit 1
        fi
